#import "common.view"

$view.showFilter = $page.model.filter && 1;

widget(container_y, {
	widget(container_x, {
		//height: $ui.height * 5/6;
		widget(dummy, { .width = 2; });

		widget(keyintercept, {
			bind($page.model.filter);
			.enabled = $page.model.canFilter;
      
			widget(container_y, {
				.filterConstraintX = true;
	
				widget(expander_y, {
					.filterConstraintX = true;

					.expansion = scurve($view.showFilter, 0.25);
					.alpha     = scurve($view.showFilter, 0.25);
	  
					widget(container_x, {
						widget(backdrop, {
							.filterConstraintX = true;
							.color = [0.3, 0.3, 0.3];
							PLATE_GFX();
							widget(container_x, {
		
								widget(label, {
									.caption = "Filter: ";
								});
		
								widget(label, {
									.caption = $page.model.filter;
								});
      							});
						});
					});
				});

	
				widget(array, {
					$view.sizer = int(getWidth() / 100);

					&clone.focused = focusedChild();
					.id = "array";
					.border = $view.sizer * 3;
					.Xspacing = $view.sizer;
					.Yspacing = $view.sizer;
					.childTilesX = $page.model.metadata.childTilesX ?? 6;
					.childTilesY = $page.model.metadata.childTilesY ?? 3;
	  
					cloner($page.model.nodes, displacement, {
						.focusable = true;
						.focusOnClick = true;
						.padding = $view.sizer * -1.5 * iir(isHovered() || isFocused(), 3) + $view.sizer * iir(isPressed(), 3);

						onEvent(activate, playTrackFromSource($self, $parent.model));

						widget(container_y, {
							.spacing = 5;
							widget(detachable, {
								widget(container_y, {
									align: top;
									widget(backdrop, {
										source: "img/tile.png";
										border: 8;
										margin: -4;
										padding: 10;
										
										widget(container_z, {
										widget(image, {
											//width: $ui.width / 10;
											.color = 0.5 + isHovered() * 0.4 + isFocused() * 0.4 + isPressed() * 0.4;
											.source = $self.metadata.icon ?? "img/nophoto.jpg";
											.alpha = 0.7 + 0.3 * isFocused();
										});

										widget(image, {
											     .alpha = 0.5;
      								     			     align: center;
								     			     color: 1.0;			     
      								     			     source: translate($self.media.playstatus, void,
								     			     	     "play", "dataroot://resources/svg/Play.svg",
								     				     "pause", "dataroot://resources/svg/Pause.svg");
    										});
										});



									});
								});
							});
							
							widget(label, {
								//.color = 0.3 + isHovered() * 0.4 + isFocused() * 0.4 + isPressed() * 0.4;
								.color = 0.7;
								.caption = $self.metadata.station;
								.align = center;
								.ellipsize = true;
								.shadow = true;

								.filterConstraintX = true;
								.sizeScale = 1.1 + 0.3* isFocused();
								.bold = isFocused();
								.outline = true;
								.shadow = true;
							});

						});
					});
				});	  
			});
		});

		widget(dummy, { .width = 2; });
		LIST_Y_SLIDER("array");
		widget(dummy, { .width = 2; });
	});

	widget(frontdrop, {
		source: "img/infobar.png";
		border: 8;
		padding: 10;
		.hidden = !($clone.focused.metadata.title && $page.model.metadata.informationBar == true);
		
		widget(container_y, {
			.spacing = 5;
			.padding = 5;
			widget(label, {
				.caption = "Title: " + $clone.focused.metadata.title;
				.align = center;
				.ellipsize = true;
				.shadow = true;
				.color = 1.0;
				.sizeScale = 1.6;
			});

			widget(label, {
				.caption = "Now playing: " + $clone.focused.metadata.artist;
				.align = center;
				.ellipsize = true;
				.shadow = true;
				.color = 1.0;
				.sizeScale = 1.1;
			});

			widget(label, {
				.hidden = !($clone.focused.metadata.url);
				.caption = "URL: " + $clone.focused.metadata.url;
				.align = center;3
				.ellipsize = true;
				.shadow = true;
				.color = 1.0;
				.sizeScale = 1.1;
			});
		});
	});
});